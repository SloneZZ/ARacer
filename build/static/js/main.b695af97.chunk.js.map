{"version":3,"sources":["ARacer_logo.png","components/login/login.jsx","components/login/register.jsx","App.jsx","serviceWorker.js","index.js"],"names":["logo","require","Login","props","className","ref","this","containerRef","src","htmlFor","type","name","placeholder","React","Component","Register","App","state","isLoginActive","rightSide","classList","add","remove","setState","prevState","current","currentActive","onClick","changeState","bind","RightSide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b695af97.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ARacer_logo.b0d8327e.png\";","import React from \"react\";\r\nconst logo = require(\"../../ARacer_logo.png\")\r\n\r\nexport class Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"base-container\" ref={this.props.containerRef}>\r\n            <div className=\"header\">Login</div>\r\n            <div className=\"content\">\r\n                <div className=\"image\">\r\n                    <img src={logo}/>\r\n                </div>\r\n                <div className=\"form\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"firstname\">Firstname</label>\r\n                        <input type=\"text\" name=\"firstname\" placeholder=\"firstname\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"lastname\">Lastname</label>\r\n                        <input type=\"text\" name=\"lastname\" placeholder=\"lastname\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\">E-Mail</label>\r\n                        <input type=\"email\" name=\"email\" placeholder=\"email\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"text\" name=\"password\" placeholder=\"password\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <button type=\"button\" className=\"btn\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from \"react\";\r\nvar logo = require(\"../../ARacer_logo.png\")\r\n\r\nexport class Register extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"base-container\" ref={this.props.containerRef}>\r\n            <div className=\"header\">Register</div>\r\n            <div className=\"content\">\r\n                <div className=\"image\">\r\n                    <img src={logo}/>\r\n                </div>\r\n                <div className=\"form\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"firstname\">Firstname</label>\r\n                        <input type=\"text\" name=\"firstname\" placeholder=\"firstname\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"lastname\">Lastname</label>\r\n                        <input type=\"text\" name=\"lastname\" placeholder=\"lastname\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\">E-Mail</label>\r\n                        <input type=\"email\" name=\"email\" placeholder=\"email\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"text\" name=\"password\" placeholder=\"password\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <button type=\"button\" className=\"btn\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from \"react\";\r\nimport \"./App.scss\"\r\nimport { Login, Register } from \"./components/login/index\"\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoginActive: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.rightSide.classList.add(\"right\");\r\n    }\r\n\r\n    changeState() {\r\n        const { isLoginActive } = this.state;\r\n        if (isLoginActive) {\r\n            this.rightSide.classList.remove(\"right\");\r\n            this.rightSide.classList.add(\"left\");\r\n        } else {\r\n            this.rightSide.classList.remove(\"left\");\r\n            this.rightSide.classList.add(\"right\");\r\n        }\r\n\r\n        this.setState((prevState) => ({ isLoginActive: !prevState.isLoginActive})); // toggle between states\r\n    }\r\n\r\n    render() {\r\n        const { isLoginActive } = this.state;\r\n        const current = isLoginActive ? \"Register\" : \"Login\"\r\n        const currentActive = isLoginActive ? \"login\" : \"register\"\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"Login\">\r\n                    <div className=\"container\">\r\n                        {isLoginActive && <Login containerRef={ref => (this.current = ref)}/> }\r\n                        {!isLoginActive && <Register containerRef={ref => (this.current = ref)}/> }\r\n                    </div>\r\n                    <RightSide\r\n                        current={current}\r\n                        currentActive={currentActive}\r\n                        containerRef={ref => this.rightSide = ref}\r\n                        onClick={this.changeState.bind(this)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst RightSide = props => {\r\n    return (\r\n    <div\r\n        className=\"right-side\"\r\n        ref={props.containerRef}\r\n        onClick={props.onClick}\r\n    >\r\n        <div className=\"inner-container\">\r\n            <div className=\"text\">\r\n                {props.current}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport App from './App';\r\nimport * as serviceWorker from  './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}